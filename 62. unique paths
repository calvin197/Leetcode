// bottom up DP

var uniquePaths = function(m, n) {
  let storage = {};
  for (let i = 1; i<=m; i++){
    for (let j = 1; j<=n; j++){
      if (i===1 && j===1) storage[[i,j]] = 1; 
      else {
        storage[[i,j]] = (storage[[i-1,j]] || 0) + (storage[[i,j-1]] || 0)
      }
    }
  }
  return storage[[m,n]]; 
};

// bottom up DP, better space complexity
var uniquePaths = function(m, n) {
  let storage = [];
  for (let i = 1; i<=m; i++){
    for (let j = 1; j<=n; j++){
      if (i===1 && j===1) storage[j] = 1; 
      else {
        storage[j] = (storage[j] || 0) + (storage[j-1] || 0)
      }
    }
  }
  return storage[n]; 
};

// naive solution (backtracking)

var uniquePaths = function(m, n) {
  var isValid = function(x, y) {
    return x <= m - 1 && y <= n - 1;
  };

  var moves = [[1, 0], [0, 1]];
  var count = 0;

  var moving = function(x, y) {
    if (x === m - 1 && y === n - 1) {
      count++;
      return;
    }
    for (let i = 0; i < moves.length; i++) {
      let nextMove = [x + moves[i][0], y + moves[i][1]];
      if (isValid(nextMove[0], nextMove[1])) {
        moving(nextMove[0], nextMove[1]);
      }
    }
  };
  moving(0, 0);
  return count;
};
